#ifndef MOTOR_CONTROLLER_HPP
#define MOTOR_CONTROLLER_HPP

// CLASE CONTROLADORA DE MOTOR
class MotorController {
public:
	// Constructor
	MotorController(uint8_t _dirPin, uint8_t _pwmPin, uint8_t _brkPin, bool _brkEnabled = true);
	
	// Funciones
	void setSpeed(int pwmValue);

	// Destructor por defecto
	~MotorController();

private:
	uint8_t dirPin, pwmPin, brkPin;
	bool reverse, brake, brakeEnabled;
};


/**
 * Constructor por defecto
 * 
 * @param  (_dirPin) Pin digital utilizado para la dirección del motor
 * @param  (_pwmPin) Pin digital para el control de velocidad del motor PWM
 * @param  (_brkPin) Pin digital para habilitar/deshabilitar los frenos
 * @param  (_brkEnabled) ¿Debería usarse el freno?
 */
MotorController::MotorController(uint8_t _dirPin, uint8_t _pwmPin, uint8_t _brkPin, bool _brkEnabled) {
	dirPin = _dirPin;
	pwmPin = _pwmPin;
	brkPin = _brkPin;
	brakeEnabled = _brkEnabled;

	pinMode(dirPin, OUTPUT);     // Dirección del motor
	pinMode(brkPin, OUTPUT);     // Freno del motor
	digitalWrite(dirPin, HIGH);

	reverse = false;
	if (brakeEnabled) {
		digitalWrite(brkPin, HIGH);
		brake = true;
	} else {
		digitalWrite(brkPin, LOW);
		brake = false;
	}
}


/**
 * Destructor por defecto
 */
MotorController::~MotorController() {
	// Vacío
}


/**
 * Establecer una nueva velocidad del motor
 * 
 * (pwmValue) El valor PWM de la nueva velocidad
 * Los valores PWM negativos harán que el motor se mueva en reversa
 * Un valor PWM de 0 activará los frenos
 */
void MotorController::setSpeed(int pwmValue) {

	// Limitar el valor PWM a +-255
	if (pwmValue > 255) pwmValue = 255;
	else if (pwmValue < -255) pwmValue = -255;
	
	// Dirección hacia adelante
	if (pwmValue > 0 && reverse) {
		digitalWrite(dirPin, HIGH);
		reverse = false;

		// Liberar el freno
		if (brake) {
			digitalWrite(brkPin, LOW);
			brake = false;
		}

	// Dirección en reversa
	} else if (pwmValue < 0 && !reverse) {
		digitalWrite(dirPin, LOW);
		reverse = true;

		// Liberar el freno
		if (brake) {
			digitalWrite(brkPin, LOW);
			brake = false;
		}

	// Si no hay movimiento, activar el freno
	} else if (brakeEnabled && !brake) {
		digitalWrite(brkPin, HIGH);
		brake = true;
	}
	
	// Enviar valor PWM
	analogWrite(pwmPin, abs(pwmValue));
}


#endif /* MOTOR_CONTROLLER_HPP */
